{"version":3,"sources":["components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Notification/Notification.js","App.js","index.js"],"names":["Section","title","children","className","FeedbackOptions","options","onAddFeedback","buttons","Object","keys","map","option","key","onClick","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","App","state","countTotalFeedback","values","reduce","acc","value","addFeedback","name","setState","prevState","countPositiveFeedbackPercentage","Math","round","this","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAiBeA,MAdf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,yBAAKC,UAAU,qBACb,4BAAKF,GACL,yBAAKE,UAAU,sBAAsBD,KCiB5BE,MArBf,YAAsD,IAA3BC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,cAC5BC,EAAUC,OAAOC,KAAKJ,GAASK,KAAI,SAACC,GACxC,OACE,4BACER,UAAU,SACVS,IAAKD,EACLE,QAAS,kBAAMP,EAAcK,KAE5BA,MAKP,OAAO,yBAAKR,UAAU,qBAAqBI,ICO9BO,MApBf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,oCACE,oCAAUJ,GACV,uCAAaC,GACb,mCAASC,GACT,qCAAWC,GACX,iDAAuBC,EAAvB,QCKSC,MAZf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OACE,oCACE,8BAAOA,KCmDEC,E,4MAlDbC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPO,mBAAqB,WACnB,OAAOhB,OAAOiB,OAAO,EAAKF,OAAOG,QAAO,SAACC,EAAKC,GAAN,OAAgBD,EAAMC,M,EAGhEC,YAAc,SAACC,GACb,EAAKC,UAAS,SAACC,GACb,OAAO,eACJF,EAAOE,EAAUF,GAAQ,O,EAKhCG,gCAAkC,WAChC,OAAOC,KAAKC,MAAyB,IAAlB,EAAKZ,MAAMR,KAAc,EAAKS,uB,uDAIjD,OACE,oCACE,kBAAC,EAAD,CAASvB,MAAO,sBACd,kBAAC,EAAD,CACEI,QAAS+B,KAAKb,MACdjB,cAAe8B,KAAKP,eAIxB,kBAAC,EAAD,CAAS5B,MAAO,cACbmC,KAAKZ,qBACJ,kBAAC,EAAD,CACET,KAAMqB,KAAKb,MAAMR,KACjBC,QAASoB,KAAKb,MAAMP,QACpBC,IAAKmB,KAAKb,MAAMN,IAChBC,MAAOkB,KAAKZ,qBACZL,mBAAoBiB,KAAKH,oCAG3B,kBAAC,EAAD,CAAcZ,QAAS,+B,GA3CjBgB,IAAMC,WCDxBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.a03688e5.chunk.js","sourcesContent":["import React from \"react\";\nimport Proptypes from \"prop-types\";\n\nfunction Section({ title, children }) {\n  return (\n    <div className=\"section-container\">\n      <h2>{title}</h2>\n      <div className=\"children-container\">{children}</div>\n    </div>\n  );\n}\n\nSection.propTypes = {\n  title: Proptypes.string.isRequired,\n  children: Proptypes.element.isRequired,\n};\n\nexport default Section;\n","import React from \"react\";\nimport Proptypes from \"prop-types\";\n\nfunction FeedbackOptions({ options, onAddFeedback }) {\n  const buttons = Object.keys(options).map((option) => {\n    return (\n      <button\n        className=\"button\"\n        key={option}\n        onClick={() => onAddFeedback(option)}\n      >\n        {option}\n      </button>\n    );\n  });\n\n  return <div className=\"buttons-container\">{buttons}</div>;\n}\n\nFeedbackOptions.propTypes = {\n  options: Proptypes.objectOf(Proptypes.number),\n  onLeaveFeedback: Proptypes.func,\n};\n\nexport default FeedbackOptions;\n","import React from \"react\";\nimport Proptypes from \"prop-types\";\n\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\n  return (\n    <>\n      <p>Good: {good}</p>\n      <p>Neutral: {neutral}</p>\n      <p>Bad: {bad}</p>\n      <p>Total: {total}</p>\n      <p>Positive feedback: {positivePercentage}% </p>\n    </>\n  );\n}\n\nStatistics.propTypes = {\n  good: Proptypes.number,\n  neutral: Proptypes.number,\n  bad: Proptypes.number,\n  total: Proptypes.func,\n  positivePercentage: Proptypes.func,\n};\n\nexport default Statistics;\n","import React from \"react\";\nimport Proptypes from \"prop-types\";\n\nfunction Notification({ message }) {\n  return (\n    <>\n      <span>{message}</span>\n    </>\n  );\n}\n\nNotification.propTypes = {\n  message: Proptypes.string.isRequired,\n};\n\nexport default Notification;\n","import React from \"react\";\nimport Section from \"./components/Section\";\nimport FeedbackOptions from \"./components/FeedbackOptions\";\nimport Statistics from \"./components/Statistics\";\nimport Notification from \"./components/Notification\";\n\nclass App extends React.Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countTotalFeedback = () => {\n    return Object.values(this.state).reduce((acc, value) => acc + value);\n  };\n\n  addFeedback = (name) => {\n    this.setState((prevState) => {\n      return {\n        [name]: prevState[name] + 1,\n      };\n    });\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    return Math.round((this.state.good * 100) / this.countTotalFeedback());\n  };\n\n  render() {\n    return (\n      <>\n        <Section title={\"Live your Feedback\"}>\n          <FeedbackOptions\n            options={this.state}\n            onAddFeedback={this.addFeedback}\n          />\n        </Section>\n\n        <Section title={\"Statistics\"}>\n          {this.countTotalFeedback() ? (\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          ) : (\n            <Notification message={\"No feedback given :(\"} />\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}